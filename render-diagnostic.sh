#!/bin/bash

# Script de diagnostic pour probl√®mes de d√©ploiement Render

echo "üîç Diagnostic des probl√®mes Render"
echo "================================="

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

echo ""
echo "üìÅ Structure des fichiers :"
echo "----------------------------"

# V√©rifier la structure des fichiers
if [ -f "Dockerfile.render" ]; then
    log_info "Dockerfile.render trouv√© √† la racine"
else
    log_error "Dockerfile.render MANQUANT √† la racine"
fi

if [ -f "render.yaml" ]; then
    log_info "render.yaml trouv√©"
    
    # V√©rifier le contenu de render.yaml
    echo ""
    echo "üîß Configuration render.yaml :"
    echo "-----------------------------"
    
    if grep -q "dockerfilePath:" render.yaml; then
        DOCKERFILE_PATH=$(grep "dockerfilePath:" render.yaml | sed 's/.*dockerfilePath: *//')
        echo "   dockerfilePath: $DOCKERFILE_PATH"
        
        if [ "$DOCKERFILE_PATH" = "Dockerfile.render" ]; then
            log_info "Chemin Dockerfile correct"
        else
            log_warning "Chemin Dockerfile pourrait √™tre incorrect: $DOCKERFILE_PATH"
        fi
    fi
    
    if grep -q "dockerContext:" render.yaml; then
        DOCKER_CONTEXT=$(grep "dockerContext:" render.yaml | sed 's/.*dockerContext: *//')
        echo "   dockerContext: $DOCKER_CONTEXT"
    else
        log_warning "dockerContext non d√©fini (sera '.' par d√©faut)"
    fi
else
    log_error "render.yaml MANQUANT"
fi

echo ""
echo "üìÇ Contenu du dossier noMoreBook :"
echo "--------------------------------"

if [ -d "noMoreBook" ]; then
    log_info "Dossier noMoreBook trouv√©"
    
    if [ -f "noMoreBook/composer.json" ]; then
        log_info "composer.json pr√©sent"
    else
        log_error "composer.json MANQUANT"
    fi
    
    if [ -f "noMoreBook/package.json" ]; then
        log_info "package.json pr√©sent"
    else
        log_error "package.json MANQUANT"
    fi
    
    if [ -d "noMoreBook/src" ]; then
        log_info "Dossier src/ pr√©sent"
    else
        log_error "Dossier src/ MANQUANT"
    fi
    
    if [ -d "noMoreBook/public" ]; then
        log_info "Dossier public/ pr√©sent"
    else
        log_error "Dossier public/ MANQUANT"
    fi
else
    log_error "Dossier noMoreBook MANQUANT"
fi

echo ""
echo "üê≥ V√©rification Dockerfile :"
echo "----------------------------"

if [ -f "Dockerfile.render" ]; then
    # V√©rifier les chemins COPY dans le Dockerfile
    echo "Chemins COPY dans Dockerfile.render :"
    grep "^COPY" Dockerfile.render | while read line; do
        echo "   $line"
    done
    
    # V√©rifier si les chemins correspondent √† la structure
    if grep -q "COPY noMoreBook/" Dockerfile.render; then
        log_info "Chemins COPY semblent corrects"
    else
        log_warning "V√©rifiez les chemins COPY dans Dockerfile.render"
    fi
fi

echo ""
echo "üí° Solutions communes :"
echo "----------------------"
echo "1. Dockerfile.render doit √™tre √† la racine du projet"
echo "2. render.yaml doit avoir dockerfilePath: Dockerfile.render (sans ./)"
echo "3. Le dossier noMoreBook/ doit contenir votre application Symfony"
echo "4. V√©rifiez que tous les fichiers sont committ√©s sur GitHub"

echo ""
echo "üîó Fichiers de r√©f√©rence :"
echo "-------------------------"
echo "   - RENDER_DEPLOYMENT_GUIDE.md (guide complet)"
echo "   - RENDER_QUICK_START.md (r√©sum√© rapide)"
echo ""
